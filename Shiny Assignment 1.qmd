---
title: "Shiny Assignment 1"
format: html
editor: visual
---

## Library package

```{r setup}
library(tidyverse)
library(shiny)
library(microbenchmark)
library(reactable)
library(vroom)
library(devtools)
```

## Problem 1

```{r}
Hadley_1 <- microbenchmark({
  ui <- fluidPage(
  selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
  verbatimTextOutput("summary"),
  tableOutput("table")
)
server <- function(input, output, session) {
  output$summary <- renderPrint({
    dataset <- get(input$dataset, "package:datasets")
    summary(dataset)
  })
  
  output$table <- renderTable({
    dataset <- get(input$dataset, "package:datasets")
    dataset
  })
}
shinyApp(ui, server)
})
summary(Hadley_1)
Hadley_2 <- microbenchmark({
ui <- fluidPage(
  selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
  verbatimTextOutput("summary"),
  tableOutput("table")
)
server <- function(input, output, session) {
  dataset <- reactive({
    get(input$dataset, "package:datasets")
  })

  output$summary <- renderPrint({
    summary(dataset())
  })
  
  output$table <- renderTable({
    dataset()
  })
}
shinyApp(ui, server)
})
summary(Hadley_2)
```

## Problem 2

### Exercise 2.3.5

#### 1

```{r}
#renderPrint(summary(mtcars)) uses verbatimTextOutput() 
#renderText("Good morning!") uses textOutput() 
#renderPrint(t.test(1:5, 2:6)) uses verbatimTextOutput() 
#renderText(str(lm(mpg \~ wt, data = mtcars))) uses verbatimTextOutput()
```

#### 2

```{r}
ui <- fluidPage(
  plotOutput("plot", height = "300px", width = "700px")
)
server <- function(input, output, session) {
  output$plot <- renderPlot(plot(1:5), 
                            res = 96, 
                            alt = "Scatterplot of 5 random numbers")
}
shinyApp(ui, server)
```

#### 3

```{r}
ui <- fluidPage(
  DT::DTOutput("table")
)
server <- function(input, output, session) {
  output$table <- DT::renderDT(mtcars, options = list(pageLength = 5))
}
shinyApp(ui,server)
```

#### 4

```{r}
ui <- fluidPage(
  reactableOutput("table")
)
server <- function(input, output, session) {
  output$table <- renderReactable({
    reactable(mtcars)
    })
}
shinyApp(ui,server)
```

### Exercise 3.3.6

#### 1

```{r}
#Server 1
#input$greeting –> output$greeting Inside renderText, name –\> input$name
#Fixed code:
#server1 <- function(input, output, server) {
#  output$greeting \<- renderText(paste0("Hello ", input\$name)) }
#Server 2
#Make greeting a reactive: greeting <- reactive(paste0("Hello ", input$name))
#Since greeting is now a reactive, add parenthesis around it: output$greeting <- renderText(greeting()) 
#Fixed code: server2 <- function(input, output, server) { greeting <- reactive(paste0("Hello ", input$name))
#  output$greeting <- renderText(greeting()) }
#Server 3
#Spelling error: output$greting –> output$greeting 
#Missing renderText() 
#Fixed code: server3 <- function(input, output, server) { output$greeting <- renderText(paste0("Hello ", input$name)) }
```

#### 2

```{r}
#For server1: 
#input$a ----+
#            |
#input$b ----+----->c ----+
#                         |
#input$d ---------------->e----> output$f

#For server2: 
#input$x1 ----+
#             |
#input$x2 ----+--> x ----+
#             |          |
#input$x3 ----+          |
#                        +--> output$z
#input$y1 ----+          |
#             +--> y ----+
#input$y2 ----+

#For server3: 
#input$a -----> a -----+
#                      |
#input$b ------------> b -----+
#                             |
#input$c -------------------> c -----+
#                                    |
#input$d --------------------------> d
```

#### 3

Both range() and var() are names of existing base R functions: range() is a base R function that computes the range of values in a numeric vector. var() is a base R function that calculates the variance of a numeric vector. By using these names for reactive expressions, you are shadowing the base R functions, which can lead to unintended behavior or errors if those base functions are needed elsewhere in your code.

### Exercise 4.8

#### 1

```{r}
#Prototype:
#   code
#    |
#    |
#    v
# selected ---->diag 
#    |          body_part
#    |          location
#    | 
#    v 
# summary ----> age_sex

#Rate and count:
#   code
#    |
#    |
#    v
# selected ---->diag
#    |          body_part
#    |          location
#    | 
#    v
# summary ----> age_sex <----y

#Narrative:
#   story         code
#     |             |
#     |             |
#     |             |
#     v             v 
# narrative<————selected ---->diag
#                   |         body_part
#                   |         location
#                   |
#                   v summary ----> age_sex <----y
```

#### 2

```{r}
dir.create("neiss")
download <- function(name) {
  url <- "https://raw.github.com/hadley/mastering-shiny/main/neiss/"
  download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
#Original code
injuries %>%
  mutate(diag = fct_lump(fct_infreq(diag), n = 5)) %>%
  group_by(diag) %>%
  summarise(n = as.integer(sum(weight)))

#Flipped code
injuries %>%
  mutate(diag = fct_infreq(fct_lump(diag, n = 5))) %>%
  group_by(diag) %>%
  summarise(n = as.integer(sum(weight)))
```

#### 3

```{r}
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
ui <- fluidPage(
  fluidRow(
    column(8,
           selectInput("code", "Product",
                       choices = setNames(products$prod_code, products$title),
                       width = "100%"
           )
    ),
    column(2, selectInput("y", "Y axis", c("rate", "count"))),
    column(2, numericInput("num_rows", "Number of Rows", value = 5, min = 0, max = 6))
  ),
  fluidRow(
    column(4, tableOutput("diag")),
    column(4, tableOutput("body_part")),
    column(4, tableOutput("location"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex"))
  ),
  fluidRow(
    column(2, actionButton("story", "Tell me a story")),
    column(10, textOutput("narrative"))
  )
)

count_top <- function(df, var, n = 5) {
  df %>%
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
    group_by({{ var }}) %>%
    summarise(n = as.integer(sum(weight)))
}

server <- function(input, output, session) {
  selected <- reactive(injuries %>% filter(prod_code == input$code))
  
  output$diag <- renderTable(count_top(selected(), diag) %>% slice(1:input$num_rows), width = "100%")
  output$body_part <- renderTable(count_top(selected(), body_part) %>% slice(1:input$num_rows), width = "100%")
  output$location <- renderTable(count_top(selected(), location) %>% slice(1:input$num_rows), width = "100%")
  
  summary <- reactive({
    selected() %>%
      count(age, sex, wt = weight) %>%
      left_join(population, by = c("age", "sex")) %>%
      mutate(rate = n / population * 1e4)
  })
  
  output$age_sex <- renderPlot({
    if (input$y == "count") {
      summary() %>%
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries")
    } else {
      summary() %>%
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people")
    }
  }, res = 96)
  
  narrative_sample <- eventReactive(
    list(input$story, selected()),
    selected() %>% pull(narrative) %>% sample(1)
  )
  output$narrative <- renderText(narrative_sample())
}

shinyApp(ui, server)
```

#### 4

```{r}
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
ui <- fluidPage(
  fluidRow(
    column(8, selectInput("code", "Product",
                          choices = setNames(products$prod_code, products$title),
                          width = "100%")
    ),
    column(2, numericInput("rows", "Number of Rows",
                           min = 1, max = 10, value = 5)),
    column(2, selectInput("y", "Y Axis", c("rate", "count")))
  ),
  fluidRow(
    column(4, tableOutput("diag")),
    column(4, tableOutput("body_part")),
    column(4, tableOutput("location"))
  ),
  fluidRow(
    column(12, plotOutput("age_sex"))
  ),
  fluidRow(
    column(2, actionButton("prev_story", "Previous story")),
    column(2, actionButton("next_story", "Next story")),
    column(8, textOutput("narrative"))
  )
)

count_top <- function(df, var, n = 5) {
  df %>%
    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
    group_by({{ var }}) %>%
    summarise(n = as.integer(sum(weight)))
}

server <- function(input, output, session) {
  selected <- reactive(injuries %>% filter(prod_code == input$code))
  
  max_no_rows <- reactive(
  max(length(unique(selected()$diag)),
      length(unique(selected()$body_part)),
      length(unique(selected()$location)))
  )
  observeEvent(input$code, {
    updateNumericInput(session, "rows", max = max_no_rows())
  })
  
  table_rows <- reactive(input$rows - 1)
  
  output$diag <- renderTable(
    count_top(selected(), diag, n = table_rows()), width = "100%")
  
  output$body_part <- renderTable(
    count_top(selected(), body_part, n = table_rows()), width = "100%")
  
  output$location <- renderTable(
    count_top(selected(), location, n = table_rows()), width = "100%")

  
  summary <- reactive({
    selected() %>%
      count(age, sex, wt = weight) %>%
      left_join(population, by = c("age", "sex")) %>%
      mutate(rate = n / population * 1e4)
  })
  
  output$age_sex <- renderPlot({
    if (input$y == "count") {
      summary() %>%
        ggplot(aes(age, n, colour = sex)) +
        geom_line() +
        labs(y = "Estimated number of injuries") +
        theme_grey(15)
    } else {
      summary() %>%
        ggplot(aes(age, rate, colour = sex)) +
        geom_line(na.rm = TRUE) +
        labs(y = "Injuries per 10,000 people") +
        theme_grey(15)
    }
  })
  
  max_no_stories <- reactive(length(selected()$narrative))
  
  story <- reactiveVal(1)
  
    observeEvent(input$code, {
    story(1)
  })
  
  observeEvent(input$next_story, {
    story((story() %% max_no_stories()) + 1)
  })
  
  observeEvent(input$prev_story, {
    story(((story() - 2) %% max_no_stories()) + 1)
  })
  
  output$narrative <- renderText({
    selected()$narrative[story()]
  })
}

shinyApp(ui, server)
```

